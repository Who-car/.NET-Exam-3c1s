// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Data.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20250212194336_HotFix")]
    partial class HotFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Domain.Entities.Member", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint")
                        .HasColumnName("room_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Spectator")
                        .HasColumnName("role");

                    b.HasKey("UserId", "RoomId")
                        .HasName("pk_members");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_members_room_id");

                    b.ToTable("members", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Entities.Move", b =>
                {
                    b.Property<long>("RoomId")
                        .HasColumnType("bigint")
                        .HasColumnName("room_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoundId")
                        .HasColumnType("bigint")
                        .HasColumnName("round_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Unknown")
                        .HasColumnName("value");

                    b.HasKey("RoomId", "UserId", "RoundId")
                        .HasName("pk_moves");

                    b.HasIndex("RoundId")
                        .HasDatabaseName("ix_moves_round_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_moves_user_id");

                    b.ToTable("moves", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Entities.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<long>("MaxRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("max_rating");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Waiting")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_rooms");

                    b.ToTable("rooms", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Entities.Round", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint")
                        .HasColumnName("room_id");

                    b.Property<long>("WinnerUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("winner_user_id");

                    b.HasKey("Id")
                        .HasName("pk_rounds");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_rounds_room_id");

                    b.HasIndex("WinnerUserId")
                        .HasDatabaseName("ix_rounds_winner_user_id");

                    b.ToTable("rounds", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Entities.Member", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Room", "Room")
                        .WithMany("Members")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_members_rooms_room_id");

                    b.HasOne("Backend.Domain.Entities.User", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_members_users_user_id");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Move", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Room", "Room")
                        .WithMany("Moves")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_moves_rooms_room_id");

                    b.HasOne("Backend.Domain.Entities.Round", "Round")
                        .WithMany("Moves")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_moves_rounds_round_id");

                    b.HasOne("Backend.Domain.Entities.User", "User")
                        .WithMany("Moves")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_moves_users_user_id");

                    b.Navigation("Room");

                    b.Navigation("Round");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Round", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Room", "Room")
                        .WithMany("Rounds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_rounds_rooms_room_id");

                    b.HasOne("Backend.Domain.Entities.User", "WinnerUser")
                        .WithMany("Rounds")
                        .HasForeignKey("WinnerUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_rounds_users_winner_user_id");

                    b.Navigation("Room");

                    b.Navigation("WinnerUser");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Room", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Moves");

                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Round", b =>
                {
                    b.Navigation("Moves");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Moves");

                    b.Navigation("Rounds");
                });
#pragma warning restore 612, 618
        }
    }
}
