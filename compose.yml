services:
  postgres-db:
    image: postgres:latest
    container_name: postgres-db
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  mongo-db:
    image: mongo:latest
    container_name: mongo-db
    env_file: .env
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongo --quiet --eval 'db.adminCommand({ping: 1})'"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbit-mq:
    image: rabbitmq:3-management
    container_name: rabbit-mq
    env_file: .env
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q check_running"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    container_name: backend
    build:
      context: ./backend/
      dockerfile: Dockerfile
    environment:
      - Database__PostgreSQL__ConnectionString=${Database__PostgreSQL__ConnectionString}
      - Database__MongoDB__ConnectionString=${Database__MongoDB__ConnectionString}
      - Database__MongoDB__DatabaseName=${Database__MongoDB__DatabaseName}
      - RabbitMq__Host=${RabbitMq__Host}
      - RabbitMq__Username=${RabbitMq__Username}
      - RabbitMq__Password=${RabbitMq__Password}
    ports:
      - "5271:8080"
      - "5272:8081"
    depends_on:
      - postgres-db
      - mongo-db
      - rabbit-mq
    restart: "no"

  frontend:
    container_name: frontend
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    ports:
      - "5173:80"

volumes:
  pgdata:
  mongodata: